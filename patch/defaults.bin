[Camera]

near clip = 1

small feature culling = true
small feature culling pixel size = 12

viewing distance = 8192

field of view = 45
first person field of view = 50.0
third person camera distance = 192
view over shoulder = true
view over shoulder offset = 30 -10
auto switch shoulder = true
zoom out when move coef = 20
preview if stand still = true
deferred preview rotation = true

head bobbing = true
head bobbing roll = 1.0
head bobbing lateral sway = 1.0
head bobbing vertical bounce = 1.0
head bobbing step = 80.0
head bobbing height = 0.6
head landing bounce = 1.5
hand bobbing = True
hand bobbing lateral sway = 1.0
hand bobbing vertical bounce = 0.5
hand inertia = 1.0
bobbing peak amplitude speed = 170.0
exteriors inertia = true


[Cells]

preload enabled = false
preload num threads = 4
preload exterior grid = true
preload fast travel = false
preload doors = false
preload distance = 1000
preload instances = true
preload cell cache min = 12
preload cell cache max = 64
preload cell expiry delay = 5
prediction time = 1
cache expiry delay = 5
target framerate = 30
pointers cache size = 60

[Terrain]

distant terrain = true
lod factor = 0.5
vertex lod mod = -2
composite map level = -2
composite map resolution = 512
max composite geometry size = 4.0
object paging = true
object paging active grid = true
object paging merge factor = 48000
object paging min size = 1
object paging min size merge factor = 0.038
object paging min size cost multiplier = 1
object paging debug batches = false

[Fog]

use distant fog = false
distant land fog start = 16384
distant land fog end = 40960
distant underwater fog start = -4096
distant underwater fog end = 2457.6
distant interior fog start = 0
distant interior fog end = 16384

[Map]
global map cell size = 18
local map hud widget size = 256
local map hud fog of war = false
local map resolution = 256
local map widget size = 512
global = true

[GUI]

scaling factor = 1.6
font size = 17
ttf resolution = 96
menu transparency = 0.90
tooltip delay = 0.0

stretch menu background = true
subtitles = false
hit fader = true
werewolf overlay = true
color background owned = 0.15 0.0 0.0 1.0
color crosshair owned = 1.0 0.15 0.15 1.0
keyboard navigation = true

color topic enable = true
color topic specific = 0.45 0.5 0.8 1
color topic exhausted = 0.3 0.3 0.3 1

[HUD]

crosshair = true

[Game]

show owned = 3
show projectile damage = true
show melee info = true

show enchant chance = true
best attack = false
difficulty = 0

actors processing range = 4000
classic reflected absorb spells behavior = true

show effect duration = true
prevent merchant equipping = true
enchanted weapons are magical = true
followers attack on sight = true
can loot during death animation = true

rebalance soul gem values = true
use additional anim sources = true

barter disposition change is permanent = true
strength influences hand to hand = 2

weapon sheathing = true
shield sheathing = true
allow capsule shape = true
only appropriate ammunition bypasses resistance = true

use magic item animations = true
normalise race speed = false

projectiles enchant multiplier = 0

uncapped damage fatigue = true

turn to movement direction = true
smooth movement = true

smooth movement player turning delay = 0.333

NPCs avoid collisions = true
NPCs give way = true

swim upward correction = true

swim upward coef = 0.2

trainers training skills based on base skill = true

always allow stealing from knocked out actors = true
graphic herbalism = true

allow actors to follow over water surface = true

[General]

anisotropy = 2
screenshot format = png
texture mag filter = linear
texture min filter = linear
texture mipmap = linear
notify on saved screenshot = false

[Shaders]

force shaders = true
force per pixel lighting = false
clamp lighting = true

auto use object normal maps = false
auto use object specular maps = false
auto use terrain normal maps = false
auto use terrain specular maps = false
normal map pattern = _n
normal height map pattern = _nh
specular map pattern = _spec
terrain specular map pattern = _diffusespec

apply lighting to environment maps = false
radial fog = true

# Internal handling of lights, ignored if 'force shaders' is off. "legacy"
# provides fixed function pipeline emulation."shaders compatibility" (default)
# uncaps the light limit, enables groundcover lighting, and uses a modified
# attenuation formula to reduce popping and light seams. "shaders" comes with
# all these benefits and is meant for larger light limits, but may not be
# supported on older hardware and may be slower on weaker hardware when
# 'force per pixel lighting' is enabled.
lighting method = shaders compatibility

# Sets the bounding sphere multiplier of light sources if 'lighting method' is
# not 'legacy'. These are used to determine if an object should receive
# lighting. Higher values will allow for smoother transitions of light sources,
# but may carry a performance cost and requires a higher number of 'max lights'
# set.
light bounds multiplier = 0.90

# The distance from the camera at which lights fade away completely.
# Set to 0 to disable fading.
maximum light distance = 8192

# Fraction of the maximum distance at which lights begin to gradually fade away.
light fade start = 0.27

# Set maximum number of lights per object.
# When 'lighting method' is set to 'legacy', this setting will have no effect.
max lights = 32

# Sets minimum ambient brightness of interior cells. Levels below this threshold will have their
# ambient values adjusted to balance the darker interiors.
# When 'lighting method' is set to 'legacy', this setting will have no effect.
minimum interior brightness = 0.17

# Convert the alpha test (cutout/punchthrough alpha) to alpha-to-coverage.
# This allows MSAA to work with alpha-tested meshes, producing better-looking edges without pixelation.
# When MSAA is off, this setting will have no visible effect, but might have a performance cost.
antialias alpha test = false

[Input]

grab cursor = true
toggle sneak = true

always run = true

camera sensitivity = 0.3

camera y multiplier = 1.0
invert x axis = false
invert y axis = false

# Enable controller support
enable controller = true

gamepad cursor speed = 0.5
joystick dead zone = 0.1

# Enable gyroscope support.
enable gyroscope = false

# Gyroscope axis that corresponds to horizontal camera axis.
gyro horizontal axis = -x

# Gyroscope axis that corresponds to vertical camera axis.
gyro vertical axis = y

# The minimum gyroscope movement that is able to rotate the camera.
gyro input threshold = 0.03

# Horizontal camera axis sensitivity to gyroscope movement.
gyro horizontal sensitivity = 0.7

# Vertical camera axis sensitivity to gyroscope movement.
gyro vertical sensitivity = 0.7

[Saves]

character =
autosave = true
timeplayed = false
max quicksaves = 3

[Sound]

device =
master volume = 0.8
footsteps volume = 0.25
music volume = 0.6
sfx volume = 0.7
voice volume = 0.6

buffer cache min = 48
buffer cache max = 54
hrtf enable = -1
hrtf =

[Video]

resolution x = 1440
resolution y = 720
fullscreen = true
screen = 0
minimize on focus loss = true
window border = true
antialiasing = 0
vsync = true
framerate limit = 33.33
contrast = 1.0
gamma = 1.0
screenshot type = regular

[Water]
shader = true
rtt size = 256
refraction = true
reflection detail = 2
small feature culling pixel size = 18.0
refraction scale = 5


[Windows]

# Location and sizes of windows as a fraction of the OpenMW window or
# screen size. (0.0 to 1.0).  X & Y, Width & Height.

# Stats window displaying level, race, class, skills and stats.
stats x = 0.0
stats y = 0.0
stats w = 0.375
stats h = 0.4275
stats maximized x = 0.0
stats maximized y = 0.0
stats maximized w = 1.0
stats maximized h = 1.0
stats pin = false
stats hidden = false
stats maximized = false

# Spells window displaying powers, spells, and magical items.
spells x = 0.625
spells y = 0.5725
spells w = 0.375
spells h = 0.4275
spells maximized x = 0.0
spells maximized y = 0.0
spells maximized w = 1.0
spells maximized h = 1.0
spells pin = false
spells hidden = false
spells maximized = false

# Local and world map window.
map x = 0.625
map y = 0.0
map w = 0.375
map h = 0.5725
map maximized x = 0.0
map maximized y = 0.0
map maximized w = 1.0
map maximized h = 1.0
map pin = false
map hidden = false
map maximized = false

# Player inventory window when explicitly opened.
inventory x = 0.0
inventory y = 0.4275
inventory w = 0.6225
inventory h = 0.5725
inventory maximized x = 0.0
inventory maximized y = 0.0
inventory maximized w = 1.0
inventory maximized h = 1.0
inventory pin = false
inventory hidden = false
inventory maximized = false

# Player inventory window when searching a container.
inventory container x = 0.0
inventory container y = 0.4275
inventory container w = 0.6225
inventory container h = 0.5725
inventory container maximized x = 0.0
inventory container maximized y = 0.5
inventory container maximized w = 1.0
inventory container maximized h = 0.5
inventory container maximized = false

# Player inventory window when bartering with a shopkeeper.
inventory barter x = 0.0
inventory barter y = 0.4275
inventory barter w = 0.6225
inventory barter h = 0.5725
inventory barter maximized x = 0.0
inventory barter maximized y = 0.5
inventory barter maximized w = 1.0
inventory barter maximized h = 0.5
inventory barter maximized = false

# Player inventory window when trading with a companion.
inventory companion x = 0.0
inventory companion y = 0.4275
inventory companion w = 0.6225
inventory companion h = 0.5725
inventory companion maximized x = 0.0
inventory companion maximized y = 0.5
inventory companion maximized w = 1.0
inventory companion maximized h = 0.5
inventory companion maximized = false

# Dialog window for talking with NPCs.
dialogue x = 0.095
dialogue y = 0.095
dialogue w = 0.810
dialogue h = 0.890
dialogue maximized x = 0.0
dialogue maximized y = 0.0
dialogue maximized w = 1.0
dialogue maximized h = 1.0
dialogue maximized = false

# Alchemy window for crafting potions.
alchemy x = 0.25
alchemy y = 0.25
alchemy w = 0.5
alchemy h = 0.5
alchemy maximized x = 0.0
alchemy maximized y = 0.0
alchemy maximized w = 1.0
alchemy maximized h = 1.0
alchemy maximized = false

# Console command window for debugging commands.
console x = 0.0
console y = 0.0
console w = 1.0
console h = 0.5
console maximized x = 0.0
console maximized y = 0.0
console maximized w = 1.0
console maximized h = 1.0
console maximized = false

# Container inventory when searching a container.
container x = 0.25
container y = 0.0
container w = 0.75
container h = 0.375
container maximized x = 0.0
container maximized y = 0.0
container maximized w = 1.0
container maximized h = 0.5
container maximized = false

# NPC inventory window when bartering with a shopkeeper.
barter x = 0.25
barter y = 0.0
barter w = 0.75
barter h = 0.375
barter maximized x = 0.0
barter maximized y = 0.0
barter maximized w = 1.0
barter maximized h = 0.5
barter maximized = false

# NPC inventory window when trading with a companion.
companion x = 0.25
companion y = 0.0
companion w = 0.75
companion h = 0.375
companion maximized x = 0.0
companion maximized y = 0.0
companion maximized w = 1.0
companion maximized h = 0.5
companion maximized = false

[Navigator]
enable = false
recast scale factor = 0.029411764705882353
cell height = 0.2
cell size = 0.2
detail sample dist = 6.0
detail sample max error = 1.0
max simplification error = 1.3
tile size = 128
border size = 16
max edge len = 12
max nav mesh query nodes = 2048
max polygons per tile = 4096
max verts per poly = 6
region merge size = 20
region min size = 8
async nav mesh updater threads = 1
max nav mesh tiles cache size = 268435456
max polygon path size = 1024
max smooth path size = 1024
triangles per chunk = 256
enable write recast mesh to file = false
enable write nav mesh to file = false
enable recast mesh file name revision = false
enable nav mesh file name revision = false
recast mesh path prefix =
nav mesh path prefix =
enable nav mesh render = false
enable agents paths render = false
enable recast mesh render = false
max tiles number = 512
min update interval ms = 250
wait until min distance to player = 5

[Shadows]
enable shadows = false
number of shadow maps = 3
maximum shadow map distance = 8192
shadow fade start = 0.9
allow shadow map overlap = true
split point uniform logarithmic ratio = 0.5
split point bias = 0.0
enable debug hud = false
enable debug overlay = false
compute scene bounds = bounds
shadow map resolution = 1024
minimum lispsm near far ratio = 0.25
polygon offset factor = 1.1
polygon offset units = 4.0
normal offset distance = 1.0
use front face culling = false
actor shadows = false
player shadows = false
terrain shadows = false
object shadows = false
enable indoor shadows = true


 
[Physics]
# Set the number of background threads used for physics.
# If no background threads are used, physics calculations are processed in the main thread
# and the settings below have no effect.
async num threads = 1

# Set the number of frames an inactive line-of-sight request will be kept
# refreshed in the background physics thread cache.
# If this is set to -1, line-of-sight requests are never cached.
lineofsight keep inactive cache = 0

# Defer bounding boxes update until collision detection.
defer aabb update = true

[Models]

# Attempt to load any valid NIF file regardless of its version and track the progress.
# Loading arbitrary meshes is not advised and may cause instability.
load unsupported nif files = false

# 3rd person base animation model that looks also for the corresponding kf-file
xbaseanim = meshes/xbase_anim.nif

# 3rd person base model with textkeys-data
baseanim = meshes/base_anim.nif

# 1st person base animation model that looks also for corresponding kf-file
xbaseanim1st = meshes/xbase_anim.1st.nif

# 3rd person beast race base model with textkeys-data
baseanimkna = meshes/base_animkna.nif

# 1st person beast race base animation model
baseanimkna1st = meshes/base_animkna.1st.nif

# 3rd person female base animation model
xbaseanimfemale = meshes/xbase_anim_female.nif

# 3rd person female base model with textkeys-data
baseanimfemale = meshes/base_anim_female.nif

# 1st person female base model with textkeys-data
baseanimfemale1st = meshes/base_anim_female.1st.nif

# 3rd person werewolf skin
wolfskin = meshes/wolf/skin.nif

# 1st person werewolf skin
wolfskin1st = meshes/wolf/skin.1st.nif

# Argonian smimkna
xargonianswimkna = meshes/xargonian_swimkna.nif

# File to load xbaseanim 3rd person animations
xbaseanimkf = meshes/xbase_anim.kf

# File to load xbaseanim 3rd person animations
xbaseanim1stkf = meshes/xbase_anim.1st.kf

# File to load xbaseanim animations from
xbaseanimfemalekf = meshes/xbase_anim_female.kf

# File to load xargonianswimkna animations from
xargonianswimknakf = meshes/xargonian_swimkna.kf

# Sky atmosphere mesh
skyatmosphere = meshes/sky_atmosphere.nif

# Sky clouds mesh 
skyclouds = meshes/sky_clouds_01.nif

# Sky stars mesh 01
skynight01 = meshes/sky_night_01.nif

# Sky stars mesh 02
skynight02 = meshes/sky_night_02.nif

# Ash clouds weather effect
weatherashcloud = meshes/ashcloud.nif

# Blight clouds weather effect
weatherblightcloud = meshes/blightcloud.nif

# Snow falling weather effect
weathersnow = meshes/snow.nif

# Blizzard weather effect
weatherblizzard = meshes/blizzard.nif

[Groundcover]

# enable separate groundcover handling
enabled = false

# A groundcover density (0.0 <= value <= 1.0)
# 1.0 means 100% density
density = 1.0

# A maximum distance in game units on which groundcover is rendered.
rendering distance = 6144.0

# A minimum size of groundcover chunk in cells (0.125, 0.25, 0.5, 1.0)
min chunk size = 0.5

# Whether grass should respond to the player treading on it.
# 0 - Grass cannot be trampled.
# 1 - The player's XY position is taken into account.
# 2 - The player's height above the ground is taken into account, too.
stomp mode = 2

# How far away from the player grass can be before it's unaffected by being trod on, and how far it moves when it is.
# 2 - MGE XE levels. Generally excessive, but what existing mods were made with in mind
# 1 - Reduced levels.
# 0 - Gentle levels.
stomp intensity = 1
